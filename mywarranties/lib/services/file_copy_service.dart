import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'package:uuid/uuid.dart';
import 'package:path/path.dart' as path;

/// Servi√ßo para criar c√≥pias independentes de documentos/ficheiros
/// Garante que os ficheiros permanecem acess√≠veis mesmo se o utilizador 
/// os remover da localiza√ß√£o original
class FileCopyService {
  static final FileCopyService _instance = FileCopyService._internal();
  final Uuid _uuid = Uuid();

  // Singleton pattern
  factory FileCopyService() {
    return _instance;
  }

  FileCopyService._internal();

  /// Cria uma c√≥pia independente de um ficheiro
  /// [originalPath] - Caminho do ficheiro original
  /// [documentType] - Tipo de documento ('receipts', 'warranties', 'documents')
  /// Retorna o caminho da c√≥pia ou null se falhar
  Future<String?> createFileCopy(String originalPath, String documentType) async {
    try {
      print('üîÑ FileCopyService: Iniciando c√≥pia de ficheiro...');
      print('üìÅ Ficheiro original: $originalPath');
      print('üìã Tipo de documento: $documentType');

      // Verificar se o ficheiro original existe
      final File originalFile = File(originalPath);
      if (!await originalFile.exists()) {
        print('‚ùå Ficheiro original n√£o existe: $originalPath');
        return null;
      }

      // Obter diret√≥rio de documentos da aplica√ß√£o
      final Directory appDir = await getApplicationDocumentsDirectory();
      final String copyDirPath = '${appDir.path}/document_copies/$documentType';
      
      // Criar diret√≥rio se n√£o existir
      final Directory copyDir = Directory(copyDirPath);
      if (!await copyDir.exists()) {
        await copyDir.create(recursive: true);
        print('üìÅ Diret√≥rio criado: $copyDirPath');
      }

      // Gerar nome √∫nico para a c√≥pia
      final String originalExtension = path.extension(originalPath);
      final String fileName = '${_uuid.v4()}$originalExtension';
      final String copyPath = '$copyDirPath/$fileName';

      print('üéØ Caminho da c√≥pia: $copyPath');

      // Criar a c√≥pia
      final File copyFile = File(copyPath);
      final List<int> bytes = await originalFile.readAsBytes();
      await copyFile.writeAsBytes(bytes);

      // Verificar se a c√≥pia foi criada com sucesso
      if (await copyFile.exists()) {
        final int originalSize = await originalFile.length();
        final int copySize = await copyFile.length();
        
        if (originalSize == copySize) {
          print('‚úÖ C√≥pia criada com sucesso!');
          print('üìä Tamanho: $copySize bytes');
          return copyPath;
        } else {
          print('‚ùå Erro: Tamanhos n√£o coincidem (original: $originalSize, c√≥pia: $copySize)');
          // Limpar c√≥pia inv√°lida
          await copyFile.delete();
          return null;
        }
      } else {
        print('‚ùå Erro: C√≥pia n√£o foi criada');
        return null;
      }

    } catch (e) {
      print('‚ùå Erro ao criar c√≥pia do ficheiro: $e');
      return null;
    }
  }

  /// Remove uma c√≥pia de ficheiro
  /// [copyPath] - Caminho da c√≥pia a remover
  Future<bool> removeFileCopy(String copyPath) async {
    try {
      final File copyFile = File(copyPath);
      if (await copyFile.exists()) {
        await copyFile.delete();
        print('üóëÔ∏è C√≥pia removida: $copyPath');
        return true;
      }
      return false;
    } catch (e) {
      print('‚ùå Erro ao remover c√≥pia: $e');
      return false;
    }
  }

  /// Verifica se uma c√≥pia existe e est√° acess√≠vel
  /// [copyPath] - Caminho da c√≥pia a verificar
  Future<bool> isFileCopyValid(String copyPath) async {
    try {
      if (copyPath.isEmpty) return false;
      
      final File copyFile = File(copyPath);
      return await copyFile.exists();
    } catch (e) {
      print('‚ùå Erro ao verificar c√≥pia: $e');
      return false;
    }
  }

  /// Obt√©m informa√ß√µes sobre uma c√≥pia de ficheiro
  /// [copyPath] - Caminho da c√≥pia
  /// Retorna um mapa com informa√ß√µes do ficheiro
  Future<Map<String, dynamic>?> getFileCopyInfo(String copyPath) async {
    try {
      final File copyFile = File(copyPath);
      if (!await copyFile.exists()) return null;

      final FileStat stat = await copyFile.stat();
      final String fileName = path.basename(copyPath);
      final String extension = path.extension(copyPath);
      
      return {
        'name': fileName,
        'extension': extension,
        'size': stat.size,
        'modified': stat.modified,
        'isValid': true,
      };
    } catch (e) {
      print('‚ùå Erro ao obter informa√ß√µes da c√≥pia: $e');
      return null;
    }
  }

  /// Limpa c√≥pias antigas (opcional - para manuten√ß√£o)
  /// [olderThanDays] - Remove c√≥pias mais antigas que X dias
  Future<int> cleanupOldCopies({int olderThanDays = 30}) async {
    try {
      final Directory appDir = await getApplicationDocumentsDirectory();
      final String baseCopyDir = '${appDir.path}/document_copies';
      final Directory copyDir = Directory(baseCopyDir);
      
      if (!await copyDir.exists()) return 0;

      int deletedCount = 0;
      final DateTime cutoffDate = DateTime.now().subtract(Duration(days: olderThanDays));
      
      await for (FileSystemEntity entity in copyDir.list(recursive: true)) {
        if (entity is File) {
          final FileStat stat = await entity.stat();
          if (stat.modified.isBefore(cutoffDate)) {
            await entity.delete();
            deletedCount++;
          }
        }
      }
      
      print('üßπ Limpeza conclu√≠da: $deletedCount ficheiros removidos');
      return deletedCount;
    } catch (e) {
      print('‚ùå Erro na limpeza: $e');
      return 0;
    }
  }

  /// Obt√©m o tamanho total ocupado pelas c√≥pias
  Future<int> getTotalCopiesSize() async {
    try {
      final Directory appDir = await getApplicationDocumentsDirectory();
      final String baseCopyDir = '${appDir.path}/document_copies';
      final Directory copyDir = Directory(baseCopyDir);
      
      if (!await copyDir.exists()) return 0;

      int totalSize = 0;
      await for (FileSystemEntity entity in copyDir.list(recursive: true)) {
        if (entity is File) {
          final FileStat stat = await entity.stat();
          totalSize += stat.size;
        }
      }
      
      return totalSize;
    } catch (e) {
      print('‚ùå Erro ao calcular tamanho: $e');
      return 0;
    }
  }
}
